--SCRIPT RECHARGEMENT MIGRATION
  DROP TABLE [gen].[MONTH]
  DROP TABLE [user].USER_SHORTCUT
  DROP TABLE [user].USER_ACCOUNT
  DROP TABLE gen.PARAMETER
  DROP TABLE [as].OPERATION_TRANSVERSE_ASIF
  DROP TABLE [as].OPERATION_TRANSVERSE_AS
  DROP TABLE [plan].PLAN_POSTE_USER
  DROP TABLE [plan].PLAN_POSTE_FREQUENCY
  DROP TABLE [plan].PLAN_POSTE
  DROP TABLE [plan].PLAN_USER
  DROP TABLE gen.PARAMETER
  DROP TABLE ref.OPERATION_TRANSVERSE
  DROP TABLE ref.OPERATION_METHOD_LEXICAL
  DROP TABLE [plan].FREQUENCY
  DROP TABLE ref.BANK_FILE_DEFINITION
  DROP TABLE [as].ACCOUNT_STATEMENT_PLAN
  DROP TABLE [as].ACCOUNT_STATEMENT_IMPORT_FILE
  DROP TABLE [as].ACCOUNT_STATEMENT
  DROP TABLE [as].ACCOUNT_STATEMENT_IMPORT
  DROP TABLE ref.ACCOUNT
  DROP TABLE ref.ACCOUNT_TYPE
  DROP TABLE ref.BANK
  DROP TABLE ref.OPERATION_DETAIL
  DROP TABLE ref.OPERATION
  DROP TABLE ref.OPERATION_METHOD
  DROP TABLE ref.OPERATION_TYPE
  DROP TABLE ref.OPERATION_TYPE_FAMILY
  DROP TABLE [plan].[PLAN_POSTE_REFERENCE]
  DROP TABLE [plan].[PLAN_POSTE]
  DROP TABLE [plan].[PLAN]
  DROP TABLE [plan].POSTE
  DROP TABLE [plan].REFERENCE_TABLE
  DROP TABLE [user].[USER]
  DROP TABLE gmap.GMAP_ADDRESS
  DROP TABLE gmap.GMAP_ADDRESS_TYPE
  DROP TABLE gmap.GMAP_ADMINISTRATIVE_AREA_LEVEL_1
  DROP TABLE gmap.GMAP_ADMINISTRATIVE_AREA_LEVEL_2
  DROP TABLE gmap.GMAP_COUNTRY
  DROP TABLE gmap.GMAP_LOCALITY
  DROP TABLE gmap.GMAP_NEIGHBORHOOD
  DROP TABLE gmap.GMAP_POSTAL_CODE
  DROP TABLE gmap.GMAP_STREET_NUMBER
  DROP TABLE gmap.GMAP_SUBLOCALITY_LEVEL_1
  DROP TABLE gmap.GMAP_SUBLOCALITY_LEVEL_2
  DROP TABLE gmap.GMAP_TYPE
  DROP TABLE gmap.GMAP_ROUTE
  

  --FK error
  FK_PLAN_POSTE_REFERENCE_REFERENCE_TABLE_ID_REFERENCE_TABLE
  FK_PLAN_POSTE_USER_PLAN_USER_ID_PLAN_USER
  FK_ACCOUNT_STATEMENT_ACCOUNT_STATEMENT_IMPORT_ID_IMPORT
  FK_ACCOUNT_STATEMENT_OPERATION_DETAIL_ID_OPERATION_DETAIL
  FK_ACCOUNT_STATEMENT_OPERATION_METHOD_ID_OPERATION_METHOD
  FK_ACCOUNT_STATEMENT_OPERATION_TYPE_ID_OPERATION_TYPE
  FK_ACCOUNT_STATEMENT_OPERATION_TYPE_FAMILY_ID_OPERATION_TYPE_FAMILY
  FK_ACCOUNT_STATEMENT_IMPORT_FILE_OPERATION_DETAIL_ID_OPERATION_DETAIL
  FK_ACCOUNT_STATEMENT_IMPORT_FILE_OPERATION_METHOD_ID_OPERATION_METHOD
  FK_ACCOUNT_STATEMENT_IMPORT_FILE_OPERATION_TYPE_ID_OPERATION_TYPE
  FK_ACCOUNT_STATEMENT_IMPORT_FILE_OPERATION_TYPE_FAMILY_ID_OPERATION_TYPE_FAMILY
  FK_OPERATION_TRANSVERSE_ASIF_OPERATION_TRANSVERSE_ID_OPERATION_TRANSVERSE

  --pas oublier supprimer table vue






--V_INTERNAL_TRANSFER_COUPLE  XmlToSwift_Demo

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [as].[V_INTERNAL_TRANSFER_COUPLE] as (
	SELECT 
	--DATALENGTH(AS1.LABEL_OPERATION)-CHARINDEX(REVERSE(' '),REVERSE(AS1.LABEL_OPERATION)) as tt,
		CAST(ROW_NUMBER() OVER (ORDER BY AS1.ID, AS2.ID) as INT) as ID,
		UPPER(SUBSTRING(AS1.LABEL_OPERATION,LEN(AS1.LABEL_OPERATION) - CHARINDEX(' ',REVERSE(AS1.LABEL_OPERATION))+1,4)) + '' + CAST(ABS(AS1.AMOUNT_OPERATION) as nvarchar(max)) + '' + cast(MONTH(AS1.DATE_INTEGRATION) as nvarchar(max)) + '' + cast(YEAR(AS1.DATE_INTEGRATION) as nvarchar(max)) + '' + cast(DAY(AS1.DATE_INTEGRATION) as nvarchar(max)) AS KEY_VALUE,
		AS1.ID AS ID_1,
		AS2.ID AS ID_2,
		AS1.ID_ACCOUNT,
		AS1.LABEL_OPERATION,
		AS1.DATE_INTEGRATION,
		AS1.AMOUNT_OPERATION
		--right(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1) AS LABEL_SHORT
	FROM [as].[ACCOUNT_STATEMENT] AS1
	INNER JOIN [as].[ACCOUNT_STATEMENT] AS2
	ON 
	RIGHT(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1)=right(AS2.LABEL_OPERATION,charindex(' ',reverse(AS2.LABEL_OPERATION))-1)
	AND ABS(AS1.AMOUNT_OPERATION) = ABS(AS2.AMOUNT_OPERATION)
	AND MONTH(AS1.DATE_INTEGRATION) = MONTH(AS2.DATE_INTEGRATION)
	AND YEAR(AS1.DATE_INTEGRATION) = YEAR(AS2.DATE_INTEGRATION)
	AND DAY(AS1.DATE_INTEGRATION) = DAY(AS2.DATE_INTEGRATION)
	AND AS1.ID<>AS2.ID
	 WHERE AS1.ID_OPERATION_METHOD=4
	 AND AS1.ID_OPERATION_TYPE_FAMILY = 6
	 GROUP BY 	
		AS1.ID,
		AS2.ID,
		AS1.ID_ACCOUNT,
		AS1.LABEL_OPERATION,
		AS1.DATE_INTEGRATION,
		AS1.AMOUNT_OPERATION

	--ORDER BY ABS(AS1.AMOUNT_OPERATION) + '' + MONTH(AS1.DATE_INTEGRATION) + '' + YEAR(AS1.DATE_INTEGRATION) + '' + DAY(AS1.DATE_INTEGRATION)
	 --ORDER BY right(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1),
	 --AS1.DATE_INTEGRATION
	 )
GO

--V_YEAR
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [gen].[V_YEAR] AS (
SELECT 
	YEAR(DATE_INTEGRATION) AS [YEAR]
FROM [as].ACCOUNT_STATEMENT
GROUP BY YEAR(DATE_INTEGRATION)
UNION
SELECT 
	YEAR(MIN(DATE_INTEGRATION))-1 AS [YEAR]
FROM [as].ACCOUNT_STATEMENT
UNION 
SELECT YEAR(MIN(DATE_INTEGRATION))+1 AS [YEAR]
FROM [as].ACCOUNT_STATEMENT
)
GO

--V_MONTH_YEAR
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [gen].[V_MONTH_YEAR] AS (
SELECT 
	M.NUMBER AS [MONTH],
	Y.[YEAR]
FROM gen.[MONTH] M 
CROSS JOIN [gen].V_YEAR Y
)
GO

--V_PLAN_OPERATION
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [plan].[V_PLAN_OPERATION] AS 
SELECT 
	ACS.ID AS ID_ACCOUNT_STATEMENT,
	CAST(ACS.DATE_INTEGRATION AS DATE) AS DATE_INTEGRATION,
	ABS(COALESCE(ACS.AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION,
	ABS(OPERATION.PREVIEW_AMOUNT) AS PREVIEW_AMOUNT,
	OPERATION.ID_PLAN as ID_PLAN,
	OPERATION.ID_PLAN_POSTE as ID_PLAN_POSTE,
	OPERATION.PLAN_POSTE_LABEL as PLAN_POSTE_LABEL,
	OPERATION.ID_POSTE as ID_POSTE,
	OPERATION.ID_REFERENCE as ID_REFERENCE,
	OPERATION.LABEL_REFERENCE as LABEL_REFERENCE,
	OPERATION.[MONTH] as [MONTH],
	OPERATION.[YEAR] as [YEAR]
FROM [as].ACCOUNT_STATEMENT ACS
RIGHT JOIN (

 SELECT 
	P.ID AS ID_PLAN,
	PP.ID AS ID_PLAN_POSTE,
	PP.LABEL AS PLAN_POSTE_LABEL,
	PP.ID_POSTE AS ID_POSTE,
	PPR.ID_REFERENCE,
	O.LABEL AS LABEL_REFERENCE,
	PPF.ID_FREQUENCY AS [MONTH],
	P.[YEAR] AS [YEAR],
	PPF.PREVIEW_AMOUNT,
	RT.TABLE_NAME
 FROM [plan].[PLAN] P
 INNER JOIN [plan].PLAN_POSTE PP
	ON P.ID=PP.ID_PLAN
 INNER JOIN [plan].PLAN_POSTE_REFERENCE PPR 
	ON PP.ID=PPR.ID_PLAN_POSTE
 INNER JOIN [plan].REFERENCE_TABLE RT
	ON PPR.ID_REFERENCE_TABLE=RT.ID
 INNER JOIN [ref].OPERATION O
	ON PPR.ID_REFERENCE=O.ID
 INNER JOIN [plan].[PLAN_POSTE_FREQUENCY] PPF
	ON PP.ID=PPF.ID_PLAN_POSTE
WHERE TABLE_NAME = 'OPERATION'
) AS OPERATION
	ON MONTH(ACS.DATE_INTEGRATION)=OPERATION.[MONTH]
	AND YEAR(ACS.DATE_INTEGRATION)=OPERATION.[YEAR]
	AND ACS.ID_OPERATION=OPERATION.ID_REFERENCE
GO

--V_PLAN_OPERATION_TYPE
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [plan].[V_PLAN_OPERATION_TYPE] AS 
SELECT 
	ACS.ID AS ID_ACCOUNT_STATEMENT,
	CAST(ACS.DATE_INTEGRATION AS DATE) AS DATE_INTEGRATION,
	ABS(COALESCE(ACS.AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION,
	ABS(OPERATION.PREVIEW_AMOUNT) AS PREVIEW_AMOUNT,
	OPERATION.ID_PLAN as ID_PLAN,
	OPERATION.ID_PLAN_POSTE as ID_PLAN_POSTE,
	OPERATION.PLAN_POSTE_LABEL as PLAN_POSTE_LABEL,
	OPERATION.ID_POSTE as ID_POSTE,
	OPERATION.ID_REFERENCE as ID_REFERENCE,
	OPERATION.LABEL_REFERENCE as LABEL_REFERENCE,
	OPERATION.[MONTH] as [MONTH],
	OPERATION.[YEAR] as [YEAR]
FROM [as].ACCOUNT_STATEMENT ACS
RIGHT JOIN (

 SELECT 
	P.ID AS ID_PLAN,
	PP.ID AS ID_PLAN_POSTE,
	PP.LABEL AS PLAN_POSTE_LABEL,
	PP.ID_POSTE AS ID_POSTE,
	PPR.ID_REFERENCE,
	OT.LABEL AS LABEL_REFERENCE,
	PPF.ID_FREQUENCY AS [MONTH],
	P.[YEAR] AS [YEAR],
	--U.FIRST_NAME,
	--PPU.PERCENTAGE_PART,
	--PPU.PERCENTAGE_PART * PPF.PREVIEW_AMOUNT / 100 AS PA,
	PPF.PREVIEW_AMOUNT,
	RT.TABLE_NAME
 FROM [plan].[PLAN] P
 INNER JOIN [plan].PLAN_POSTE PP
	ON P.ID=PP.ID_PLAN
 --INNER JOIN PLAN_POSTE_USER PPU
	--ON PP.ID=PPU.ID_PLAN_POSTE
 --INNER JOIN PLAN_USER PU
	--ON PPU.ID_PLAN_USER=PU.ID
 --INNER JOIN [USER] U
	--ON PU.ID_USER = U.ID
 INNER JOIN [plan].PLAN_POSTE_REFERENCE PPR 
	ON PP.ID=PPR.ID_PLAN_POSTE
 INNER JOIN [plan].REFERENCE_TABLE RT
	ON PPR.ID_REFERENCE_TABLE=RT.ID
 INNER JOIN [ref].OPERATION_TYPE OT 
	ON PPR.ID_REFERENCE=OT.ID
 INNER JOIN [plan].[PLAN_POSTE_FREQUENCY] PPF
	ON PP.ID=PPF.ID_PLAN_POSTE
WHERE TABLE_NAME = 'OPERATION_TYPE'
) AS OPERATION
	ON MONTH(ACS.DATE_INTEGRATION)=OPERATION.[MONTH]
	AND YEAR(ACS.DATE_INTEGRATION)=OPERATION.[YEAR]
	AND ACS.ID_OPERATION_TYPE=OPERATION.ID_REFERENCE
GO

--V_PLAN_OPERATION_TYPE_FAMILY
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [plan].[V_PLAN_OPERATION_TYPE_FAMILY] AS 
SELECT 
	ACS.ID AS ID_ACCOUNT_STATEMENT,
	CAST(ACS.DATE_INTEGRATION AS DATE) AS DATE_INTEGRATION,
	ABS(COALESCE(ACS.AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION,
	ABS(OPERATION.PREVIEW_AMOUNT) AS PREVIEW_AMOUNT,
	OPERATION.ID_PLAN as ID_PLAN,
	OPERATION.ID_PLAN_POSTE as ID_PLAN_POSTE,
	OPERATION.PLAN_POSTE_LABEL as PLAN_POSTE_LABEL,
	OPERATION.ID_POSTE as ID_POSTE,
	OPERATION.ID_REFERENCE as ID_REFERENCE,
	OPERATION.LABEL_REFERENCE as LABEL_REFERENCE,
	OPERATION.[MONTH] as [MONTH],
	OPERATION.[YEAR] as [YEAR]
FROM [as].ACCOUNT_STATEMENT ACS
RIGHT JOIN (

 SELECT 
	P.ID AS ID_PLAN,
	PP.ID AS ID_PLAN_POSTE,
	PP.LABEL AS PLAN_POSTE_LABEL,
	PP.ID_POSTE AS ID_POSTE,
	PPR.ID_REFERENCE,
	OTF.LABEL AS LABEL_REFERENCE,
	PPF.ID_FREQUENCY AS [MONTH],
	P.[YEAR] AS [YEAR],
	--U.FIRST_NAME,
	--PPU.PERCENTAGE_PART,
	--PPU.PERCENTAGE_PART * PPF.PREVIEW_AMOUNT / 100 AS PA,
	PPF.PREVIEW_AMOUNT,
	RT.TABLE_NAME
 FROM [plan].[PLAN] P
 INNER JOIN [plan].PLAN_POSTE PP
	ON P.ID=PP.ID_PLAN
 --INNER JOIN PLAN_POSTE_USER PPU
	--ON PP.ID=PPU.ID_PLAN_POSTE
 --INNER JOIN PLAN_USER PU
	--ON PPU.ID_PLAN_USER=PU.ID
 --INNER JOIN [USER] U
	--ON PU.ID_USER = U.ID
 INNER JOIN [plan].PLAN_POSTE_REFERENCE PPR 
	ON PP.ID=PPR.ID_PLAN_POSTE
 INNER JOIN [plan].REFERENCE_TABLE RT
	ON PPR.ID_REFERENCE_TABLE=RT.ID
 INNER JOIN [ref].OPERATION_TYPE_FAMILY OTF 
	ON PPR.ID_REFERENCE=OTF.ID
 INNER JOIN [plan].[PLAN_POSTE_FREQUENCY] PPF
	ON PP.ID=PPF.ID_PLAN_POSTE
WHERE TABLE_NAME = 'OPERATION_TYPE_FAMILY'
) AS OPERATION
	ON MONTH(ACS.DATE_INTEGRATION)=OPERATION.[MONTH]
	AND YEAR(ACS.DATE_INTEGRATION)=OPERATION.[YEAR]
	AND ACS.ID_OPERATION_TYPE_FAMILY=OPERATION.ID_REFERENCE
GO

--V_PLAN_GLOBAL
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

	CREATE VIEW [plan].[V_PLAN_GLOBAL] AS 
	SELECT 
		CAST(ROW_NUMBER() OVER (ORDER BY ID_REFERENCE, [MONTH],[YEAR]) as INT) as ID,
		T.*
	FROM (
	SELECT * FROM [plan].V_PLAN_OPERATION
	UNION
	SELECT * FROM [plan].V_PLAN_OPERATION_TYPE
	UNION
	SELECT * FROM [plan].V_PLAN_OPERATION_TYPE_FAMILY
	) AS T

GO

--spGetAsChartEvolutionBrut
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [as].[spGetAsChartEvolutionBrut]
  (
		@idAccount	INT,
		@dateMin	DATE,
		@dateMax	DATE
  )
  AS
  BEGIN
  
--declare @idAccount as int;
--declare @dateMin as Datetime;
--declare @dateMax as Datetime;
--declare @isWithITransfer INT;

--set @dateMin='01/08/2017';
--set @dateMax='31/08/2018';
--set @idAccount = null;

SELECT 
	CAST(ROW_NUMBER() OVER (ORDER BY MY.[YEAR], MY.[MONTH]) as INT) as Id,
	MY.[MONTH] AS [Month],
	MY.[YEAR] AS [Year],
	COALESCE(AST.AMOUNT_OPERATION_CREDIT,0) AS [Credit],
	COALESCE(AST.AMOUNT_OPERATION_DEBIT,0) AS [Debit],
	COALESCE(AST.AMOUNT_OPERATION_BALANCE,0) AS [Balance]
FROM  [gen].V_MONTH_YEAR MY 
LEFT JOIN
	(
	SELECT 
		FORMAT(MONTH(DATE_INTEGRATION),'00') AS [MONTH],
		YEAR(DATE_INTEGRATION) AS [YEAR],
		SUM(IIF(AMOUNT_OPERATION<0,AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION_DEBIT,
		SUM(IIF(AMOUNT_OPERATION>0,AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION_CREDIT,
		SUM(AMOUNT_OPERATION) AS AMOUNT_OPERATION_BALANCE
	FROM [as].ACCOUNT_STATEMENT 
	WHERE (ID_ACCOUNT=@idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION >= @dateMin
	AND DATE_INTEGRATION<= @dateMax
	GROUP BY FORMAT(MONTH(DATE_INTEGRATION),'00'),YEAR(DATE_INTEGRATION)
	) AS AST
	ON AST.[MONTH] = MY.[MONTH]
	AND AST.[YEAR] = MY.[YEAR]
WHERE CONVERT(DATETIME,'01/' + MY.[MONTH] + '/' + CONVERT(nvarchar(20),MY.[YEAR]) ,103) >= @dateMin
AND EOMONTH(CONVERT(DATETIME,'01/' + MY.[MONTH] + '/' + CONVERT(nvarchar(20),MY.[YEAR]) ,103)) <= @dateMax
--GROUP BY ID, MY.[MONTH],MY.[YEAR],AMOUNT_OPERATION_DEBIT,AMOUNT_OPERATION_CREDIT,AMOUNT_OPERATION_BALANCE
ORDER BY MY.[YEAR],MY.[MONTH]

END

GO

--spGetAsChartEvolutionCustomOtf
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [as].[spGetAsChartEvolutionCustomOtf]
  (
		@idAccount	INT,
		@idOperationTypeFamily INT,
		@dateMin	DATE,
		@dateMax	DATE
  )
  AS
  BEGIN
  
--declare @idAccount as int;
--declare @dateMin as Datetime;
--declare @dateMax as Datetime;
--declare @idOperationTypeFamily INT;

--set @dateMin='01/08/2017';
--set @dateMax='31/08/2018';
--set @idAccount = null;
--set @idOperationTypeFamily=11

SELECT 
	CAST(ROW_NUMBER() OVER (ORDER BY MY.[YEAR], MY.[MONTH]) as INT) as Id,
	MY.[MONTH] AS [Month],
	MY.[YEAR] AS [Year],
	COALESCE(AMOUNT_OPERATION,0) AS [Amount]
FROM  [gen].V_MONTH_YEAR MY 
LEFT JOIN
	(
	SELECT 
		FORMAT(MONTH(DATE_INTEGRATION),'00') AS [MONTH],
		YEAR(DATE_INTEGRATION) AS [YEAR],
		SUM(AMOUNT_OPERATION) AS AMOUNT_OPERATION
	FROM [as].ACCOUNT_STATEMENT 
	WHERE (ID_ACCOUNT=@idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION >= @dateMin
	AND DATE_INTEGRATION<= @dateMax
	AND ID_OPERATION_TYPE_FAMILY = @idOperationTypeFamily
	GROUP BY FORMAT(MONTH(DATE_INTEGRATION),'00'),YEAR(DATE_INTEGRATION)
	) AS AST
	ON AST.[MONTH] = MY.[MONTH]
	AND AST.[YEAR] = MY.[YEAR]
WHERE CONVERT(DATETIME,'01/' + MY.[MONTH] + '/' + CONVERT(nvarchar(20),MY.[YEAR]) ,103) >= @dateMin
AND EOMONTH(CONVERT(DATETIME,'01/' + MY.[MONTH] + '/' + CONVERT(nvarchar(20),MY.[YEAR]) ,103)) <= @dateMax
ORDER BY MY.[YEAR],MY.[MONTH]

END

GO


--spGetAsChartEvolutionNoIntTransfer
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [as].[spGetAsChartEvolutionNoIntTransfer]
  (
		@idAccount	INT,
		@dateMin	DATE,
		@dateMax	DATE
  )
  AS
  BEGIN
  
--declare @idAccount as int;
--declare @dateMin as Datetime;
--declare @dateMax as Datetime;

--set @dateMin='01/08/2017';
--set @dateMax='31/08/2018';
--set @idAccount = null;

SELECT 
	CAST(ROW_NUMBER() OVER (ORDER BY MY.[YEAR], MY.[MONTH]) as INT) as Id,
	MY.[MONTH] AS [Month],
	MY.[YEAR] AS [Year],
	COALESCE(AST.AMOUNT_OPERATION_CREDIT,0) AS [Credit],
	COALESCE(AST.AMOUNT_OPERATION_DEBIT,0) AS [Debit],
	COALESCE(AST.AMOUNT_OPERATION_BALANCE,0) AS [Balance]
FROM  [gen].V_MONTH_YEAR MY 
LEFT JOIN
	(
	SELECT 
		FORMAT(MONTH(DATE_INTEGRATION),'00') AS [MONTH],
		YEAR(DATE_INTEGRATION) AS [YEAR],
		SUM(IIF(AMOUNT_OPERATION<0,AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION_DEBIT,
		SUM(IIF(AMOUNT_OPERATION>0,AMOUNT_OPERATION,0)) AS AMOUNT_OPERATION_CREDIT,
		SUM(AMOUNT_OPERATION) AS AMOUNT_OPERATION_BALANCE
	FROM [as].ACCOUNT_STATEMENT 
	WHERE (ID_ACCOUNT=@idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION >= @dateMin
	AND DATE_INTEGRATION<= @dateMax
	AND ID_OPERATION_TYPE_FAMILY<>6
	GROUP BY FORMAT(MONTH(DATE_INTEGRATION),'00'),YEAR(DATE_INTEGRATION)
	) AS AST
	ON AST.[MONTH] = MY.[MONTH]
	AND AST.[YEAR] = MY.[YEAR]
WHERE CONVERT(DATETIME,'01/' + MY.[MONTH] + '/' + CONVERT(nvarchar(20),MY.[YEAR]) ,103) >= @dateMin
AND EOMONTH(CONVERT(DATETIME,'01/' + MY.[MONTH] + '/' + CONVERT(nvarchar(20),MY.[YEAR]) ,103)) <= @dateMax
--GROUP BY ID, MY.[MONTH],MY.[YEAR],AMOUNT_OPERATION_DEBIT,AMOUNT_OPERATION_CREDIT,AMOUNT_OPERATION_BALANCE
ORDER BY MY.[YEAR],MY.[MONTH]

END

GO

--spGetAsInternalTransferCouple
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [as].[spGetAsInternalTransferCouple]
  (
	@idAccountStatement INT
  )
  AS
  BEGIN

--DECLARE @idAccountStatement	INT;
--SET @idAccountStatement=33

  SELECT AST.* 
  FROM [as].V_INTERNAL_TRANSFER_COUPLE VITC
  INNER JOIN [as].ACCOUNT_STATEMENT AST
  ON VITC.ID_2 = AST.ID
  WHERE ID_1 = @idAccountStatement

END

GO

--spGetSolde
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [as].[spGetSolde]
  (
		@idUser		INT,
		@idAccount	INT,
		@dateStart	DATE,
		@dateEnd	DATE,
		@isWithITransfer INT
  )
  AS
  BEGIN

--DECLARE		@idAccount	INT;
--DECLARE		@dateStart	DATE;
--DECLARE		@dateEnd	DATE;
--DECLARE		@isWithITransfer INT;
--DECLARE		@idUser INT;

--SET @idAccount	=null
--SET @idUser		=3
--SET @dateStart	='01-01-2000'
--SET @dateEnd	='28-02-2019'
--SET @isWithITransfer =0


SELECT 
	UA.ID_ACCOUNT AS IdAccount,
	CAST(round(coalesce(CDT.CREDIT,0),2) as float) AS Credit,
	CAST(round(coalesce(CDT.DEBIT,0),2) as float) AS Debit,
	CAST(round(coalesce(CDT.TOTAL,0),2) as float) AS Total,
	cast(A.START_AMOUNT + round(coalesce(TOTAL.TOTAL,0),2) as float) AS Solde

FROM [user].USER_ACCOUNT UA
INNER JOIN [ref].ACCOUNT A
	ON UA.ID_ACCOUNT = A.ID
LEFT JOIN 
(
	SELECT 
		AST.ID_ACCOUNT,
		SUM(AMOUNT_OPERATION) as TOTAL
	FROM [as].ACCOUNT_STATEMENT AST
	WHERE (ID_ACCOUNT = @idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION<=@dateEnd
	GROUP BY AST.ID_ACCOUNT
) AS TOTAL
 ON UA.ID_ACCOUNT = TOTAL.ID_ACCOUNT
LEFT JOIN
(
	SELECT	
		ID_ACCOUNT,
		SUM(DEBIT) AS DEBIT,
		SUM(CREDIT) AS CREDIT,
		SUM(DEBIT) + SUM(CREDIT) AS TOTAL
	FROM (
	SELECT 
		ID_ACCOUNT,
		CASE WHEN AMOUNT_OPERATION<0 THEN AMOUNT_OPERATION END AS DEBIT,
		CASE WHEN AMOUNT_OPERATION>0 THEN AMOUNT_OPERATION END AS CREDIT
	FROM [as].ACCOUNT_STATEMENT
	WHERE (ID_ACCOUNT = @idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION >= @dateStart
	AND DATE_INTEGRATION <= @dateEnd
	) AS CDT
	GROUP BY ID_ACCOUNT
) AS CDT
	ON UA.ID_ACCOUNT = CDT.ID_ACCOUNT
WHERE ID_USER=@idUser

END

GO