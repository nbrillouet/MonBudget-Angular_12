SELECT * FROM [ACCOUNT_STATEMENT] 
WHERE ID NOT IN (

	SELECT 
		AS1.ID
		--AS1.LABEL_OPERATION,
		--AS1.DATE_INTEGRATION,
		--AS1.AMOUNT_OPERATION,
		--right(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1) AS LABEL_SHORT
	FROM [ACCOUNT_STATEMENT] AS1
	INNER JOIN [ACCOUNT_STATEMENT] AS2
	ON 
	right(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1)=right(AS2.LABEL_OPERATION,charindex(' ',reverse(AS2.LABEL_OPERATION))-1)
	AND ABS(AS1.AMOUNT_OPERATION) = ABS(AS2.AMOUNT_OPERATION)
	AND MONTH(AS1.DATE_INTEGRATION) = MONTH(AS2.DATE_INTEGRATION)
	AND YEAR(AS1.DATE_INTEGRATION) = YEAR(AS2.DATE_INTEGRATION)
	AND AS1.ID<>AS2.ID
	 WHERE AS1.ID_OPERATION_METHOD=4
	 AND AS1.ID_OPERATION_TYPE_FAMILY = 6
	 GROUP BY 	
		AS1.ID,
		AS1.LABEL_OPERATION,
		AS1.DATE_INTEGRATION,
		AS1.AMOUNT_OPERATION
	 --ORDER BY right(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1),
	 --AS1.DATE_INTEGRATION

 ) 
 AND ID_OPERATION_METHOD=4
 AND ID_OPERATION_TYPE_FAMILY = 6
 
 
 
 ----------------------------------------------------
 TOUS VIREMENT EXTERNE NON COUPLE WORK IN PROGRESS
 ----------------------------------------------------
 USE [Budget]
GO
/****** Object:  StoredProcedure [as].[spGetAsInternalTransferCouple]    Script Date: 03/05/2020 14:53:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [as].[spGetAsInternalTransferCouple]
  (
	@idAccountStatement INT,
	@idUserGroup INT
  )
  AS
  BEGIN

--DECLARE @idAccountStatement	INT;
DECLARE @idUserGroup INT;
--SET @idAccountStatement=5
SET @idUserGroup=3

	DECLARE @idOperationType INT
	SET @idOperationType = (SELECT ID FROM ref.OPERATION_TYPE
		WHERE CODE='VIRI' --'Virement interne' 
		AND ID_USER_GROUP = @idUserGroup)
	select @idOperationType

	SELECT 
		CAST(ROW_NUMBER() OVER (ORDER BY AS1.ID, AS2.ID) as INT) as ID,
		--UPPER(SUBSTRING(AS1.LABEL_OPERATION,LEN(AS1.LABEL_OPERATION) - CHARINDEX(' ',REVERSE(AS1.LABEL_OPERATION))+1,4)) + '' + CAST(ABS(AS1.AMOUNT_OPERATION) as nvarchar(max)) + '' + cast(MONTH(AS1.DATE_INTEGRATION) as nvarchar(max)) + '' + cast(YEAR(AS1.DATE_INTEGRATION) as nvarchar(max)) + '' + cast(DAY(AS1.DATE_INTEGRATION) as nvarchar(max)) AS KEY_VALUE,
		AS1.ID AS ID_1,
		AS2.ID AS ID_2,
		AS1.ID_ACCOUNT,
		AS1.LABEL_OPERATION,
		AS1.DATE_INTEGRATION,
		AS1.AMOUNT_OPERATION
	INTO #INTERNAL_TRANSFER_COUPLE
	FROM [as].[ACCOUNT_STATEMENT] AS1
	INNER JOIN [as].[ACCOUNT_STATEMENT] AS2
	ON 
	--RIGHT(AS1.LABEL_OPERATION,charindex(' ',reverse(AS1.LABEL_OPERATION))-1)=right(AS2.LABEL_OPERATION,charindex(' ',reverse(AS2.LABEL_OPERATION))-1)
	 ABS(AS1.AMOUNT_OPERATION) = ABS(AS2.AMOUNT_OPERATION)
    --AND UPPER(AS1.LABEL_OPERATION) LIKE 'VIR%'
	--AND UPPER(AS2.LABEL_OPERATION) LIKE 'VIR%'
	AND AS1.ID_OPERATION=AS2.ID_OPERATION
	AND MONTH(AS1.DATE_INTEGRATION) = MONTH(AS2.DATE_INTEGRATION)
	AND YEAR(AS1.DATE_INTEGRATION) = YEAR(AS2.DATE_INTEGRATION)
	AND DAY(AS1.DATE_INTEGRATION) = DAY(AS2.DATE_INTEGRATION)
	AND AS1.ID<>AS2.ID
	 WHERE AS1.ID_OPERATION_TYPE=@idOperationType
	 GROUP BY 	
		AS1.ID,
		AS2.ID,
		AS1.ID_ACCOUNT,
		AS1.LABEL_OPERATION,
		AS1.DATE_INTEGRATION,
		AS1.AMOUNT_OPERATION

  SELECT AST.* 
  FROM #INTERNAL_TRANSFER_COUPLE VITC
  INNER JOIN [as].ACCOUNT_STATEMENT AST
  ON VITC.ID_2 = AST.ID
  WHERE (ID_1=@idAccountStatement OR @idAccountStatement is NULL) 

  --DROP TABLE #INTERNAL_TRANSFER_COUPLE
END


select * from #INTERNAL_TRANSFER_COUPLE

select * from [as].ACCOUNT_STATEMENT AST
INNER JOIN ref.OPERATION_TYPE OT
	ON AST.ID_OPERATION_TYPE = OT.ID
WHERE CODE='VIRI'
AND ID_USER_GROUP = 3
AND AST.ID NOT IN ( (SELECT ID_1 as ID FROM #INTERNAL_TRANSFER_COUPLE )
UNION 
(SELECT ID_2 as ID FROM #INTERNAL_TRANSFER_COUPLE ) )
