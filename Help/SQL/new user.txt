ID	USER_NAME	LAST_NAME	FIRST_NAME	PASSWORD_HASH	PASSWORD_SALT	GENDER	BIRTH_DATE	CREATION_DATE	LAST_ACTIVE_DATE	ID_GMAP_ADDRESS	AVATAR_URL	ID_AVATAR_CLOUD	ID_USER_GROUP	MAIL_ADDRESS	IS_MAIL_CONFIRMED	ACTIVATION_CODE	ROLE
1	invité	Doe	John	NULL	NULL	NULL	1977-02-16 00:00:00.0000000	2017-01-01 00:00:00.0000000	2018-01-01 00:00:00.0000000	1	assets/images/avatars/profile.jpg	NULL	2	NULL	0	NULL	User
2	nico	BRILLOUET	Nicolas	0x73A4AF25D35C737E858FB65B47CAD9E0BD3E35855267BA03D65D5148E2F5F0590E417275726542A55BC120522C23899C19689183B554ED27629A5EA007163B20	0xE3AD2E2D9F7F87B7A3F2B5F7D1F623A6C49B9C0008ACE9ACFA522A3048C55079377A10E3C9323005F8EE408E3EAE00635707F8B44697772FADFC661F03CBCAD22A8F611190A69357B895DC69090559190B5007499A4C3869846D79A1BFD595D9CBBFC57D47405D371EFE810FC9A640BDF846BD0FF83370A8E2A2A594761055F2	NULL	1977-02-16 00:00:00.0000000	0001-01-01 00:00:00.0000000	2018-09-20 14:24:06.8456588	1	http://res.cloudinary.com/killmeagain77/image/upload/v1560497621/ps8drekg0lkxpn4x71um.jpg	ps8drekg0lkxpn4x71um	3	nico_brillouet@hotmail.com	1	NULL	Admin
3	NULL	CHEROY	Sandra	NULL	NULL	NULL	1982-01-25 00:00:00.0000000	2017-01-01 00:00:00.0000000	2018-01-01 00:00:00.0000000	1	assets/images/avatars/profile.jpg	NULL	3	NULL	0	NULL	User
5	test	NULL	NULL	0x69183A31DBCA7980BCEE8ABB404E087274EE0418F0429DFA0FA8AB1CE4F9ED5A6AB651E482BA3D0448A5DD3485DB2DC180D4ECC92754FEA0ED4FBB320FF2B140	0xFDF30DFFCBB6ABBD1F9E3C494A687D8B2F215F63C4DBBAD75607FE1ADC0EE25365075AB654190F9E3603E418261E5FAB42CE6BA54B4812C9F14D5B0EC9B5C66E5B69D5ED710785B16980E74E64BAAEBE62E5301DF3B13BBEEC9D4005391B6FA19EDF98169316B0BF0E56282D33A0500D7424F8D28D7381C9E66C7F720237F327	NULL	0001-01-01 00:00:00.0000000	0001-01-01 00:00:00.0000000	0001-01-01 00:00:00.0000000	NULL	NULL	NULL	4	nico_brillouet@hotmail.com	1	ACTIVATED	User
10	test2	NULL	NULL	0x704060214BDE8C27F09686FDD8CB8888EB0D104C3CBE52EA39B3B40E48D1C78624EE2C31EB9702A6C6B75E0106091E5258D4817B1BCBEF89D01BB7BADECA3595	0xCCD946DD656D36AF813AC6884E35F0A6FB55A9609753DD01D7B8031AB4485E11480C01252EE4EFFFF1D7795B73E94DE7AB8D41F097318DC0D7D4F6ED1F2D63400746B95A380FF7ADF89B9DC3C3123174F6BD94B523EC5FFF2193A7F131A007790490973CCEA81BFCA9127632673968D6490FAAD2785B2217E409E4EA4D0BD042	NULL	0001-01-01 00:00:00.0000000	0001-01-01 00:00:00.0000000	0001-01-01 00:00:00.0000000	NULL	NULL	NULL	5	kill_me_again_77@hotmail.com	1	ACTIVATED	User



  insert into [XmlToSwift_Demo].[ref].[ASSET] values ('images\Otf','OtfEnfant','svg',1)
  
  
  insert into [XmlToSwift_Demo].[ref].[ASSET] values ('images\bank-family','BP','svg',2)
  insert into [XmlToSwift_Demo].[ref].[ASSET] values ('images\bank-family','CA','svg',2)
  
  
  //bank-FAMILY
  update [ref].[BANK_FAMILY] set code='INC' where ID=1
  update [ref].[BANK_FAMILY] set code='BP' where ID=2
  update [ref].[BANK_FAMILY] set code='CA' where ID=3

  update [ref].[BANK_FAMILY] set label='INCONNU' where ID=1
  update [ref].[BANK_FAMILY] set label='Banque Populaire' where ID=2
  update [ref].[BANK_FAMILY] set label='Crédit Agricole' where ID=3
  
  //[ref].[ACCOUNT]
  update [ref].[ACCOUNT] set id_user_owner=2 
  
  //USER ACCOUNT (ACTIVATION_CODE)
  update [user].[USER_ACCOUNT] set activation_code='Active' where ID_USER=2
  update [user].[USER_ACCOUNT] set activation_code='Refused' where ID_USER=3
  
  //BANK SUB FAMILY (attention aux id asset...
update [ref].[BANK_SUB_FAMILY] set code='INC',LABEL='INCONNU',ID_ASSET=1 where ID_BANK_FAMILY=1
update [ref].[BANK_SUB_FAMILY] set code='BPVF',LABEL='Banque Populaire Val De France',ID_ASSET=1020 where ID_BANK_FAMILY=2
update [ref].[BANK_SUB_FAMILY] set code='CAM',LABEL='Crédit Agricole Du Morbihan',ID_ASSET=1021 where ID_BANK_FAMILY=3



//SOLDE A COMPARER
USE [XmlToSwift_Demo]
GO
/****** Object:  StoredProcedure [as].[spGetSolde]    Script Date: 28/05/2020 15:49:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [as].[spGetSolde]
  (
		@idUser		INT,
		@idAccount	INT,
		@dateStart	DATE,
		@dateEnd	DATE,
		@isWithITransfer INT
  )
  AS
  BEGIN

--DECLARE		@idAccount	INT;
--DECLARE		@dateStart	DATE;
--DECLARE		@dateEnd	DATE;
--DECLARE		@isWithITransfer INT;
--DECLARE		@idUser INT;

--SET @idAccount	=null
--SET @idUser		=3
--SET @dateStart	='01-01-2000'
--SET @dateEnd	='28-02-2019'
--SET @isWithITransfer =0


SELECT 
	UA.ID_ACCOUNT AS IdAccount,
	CAST(round(coalesce(CDT.CREDIT,0),2) as float) AS Credit,
	CAST(round(coalesce(CDT.DEBIT,0),2) as float) AS Debit,
	CAST(round(coalesce(CDT.TOTAL,0),2) as float) AS Total,
	cast(A.START_AMOUNT + round(coalesce(TOTAL.TOTAL,0),2) as float) AS Solde

FROM [user].USER_ACCOUNT UA
INNER JOIN [ref].ACCOUNT A
	ON UA.ID_ACCOUNT = A.ID
LEFT JOIN 
(
	SELECT 
		AST.ID_ACCOUNT,
		SUM(AMOUNT_OPERATION) as TOTAL
	FROM [as].ACCOUNT_STATEMENT AST
	WHERE (ID_ACCOUNT = @idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION<=@dateEnd
	GROUP BY AST.ID_ACCOUNT
) AS TOTAL
 ON UA.ID_ACCOUNT = TOTAL.ID_ACCOUNT
LEFT JOIN
(
	SELECT	
		ID_ACCOUNT,
		SUM(coalesce(DEBIT,0)) AS DEBIT,
		SUM(coalesce(CREDIT,0)) AS CREDIT,
		SUM(coalesce(DEBIT,0)) + SUM(coalesce(CREDIT,0)) AS TOTAL
	FROM (
	SELECT 
		ID_ACCOUNT,
		CASE WHEN AMOUNT_OPERATION<0 THEN AMOUNT_OPERATION END AS DEBIT,
		CASE WHEN AMOUNT_OPERATION>0 THEN AMOUNT_OPERATION END AS CREDIT
	FROM [as].ACCOUNT_STATEMENT
	WHERE (ID_ACCOUNT = @idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION >= @dateStart
	AND DATE_INTEGRATION <= @dateEnd
	) AS CDT
	GROUP BY ID_ACCOUNT
) AS CDT
	ON UA.ID_ACCOUNT = CDT.ID_ACCOUNT
WHERE ID_USER=@idUser
AND (UA.ID_ACCOUNT = @idAccount OR @idAccount is NULL)
END





/////BOULOT
USE [XmlToSwift_Demo]
GO
/****** Object:  StoredProcedure [as].[spGetSolde]    Script Date: 02/06/2020 16:04:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [as].[spGetSolde]
  (
		@idUser		INT,
		@idAccount	INT,
		@dateStart	DATE,
		@dateEnd	DATE,
		@isWithITransfer INT
  )
  AS
  BEGIN

--DECLARE		@idAccount	INT;
--DECLARE		@dateStart	DATE;
--DECLARE		@dateEnd	DATE;
--DECLARE		@isWithITransfer INT;
--DECLARE		@idUser INT;

--SET @idAccount	=null
--SET @idUser		=3
--SET @dateStart	='01-01-2000'
--SET @dateEnd	='28-02-2019'
--SET @isWithITransfer =0


SELECT 
	UA.ID_ACCOUNT AS IdAccount,
	CAST(round(coalesce(CDT.CREDIT,0),2) as float) AS Credit,
	CAST(round(coalesce(CDT.DEBIT,0),2) as float) AS Debit,
	CAST(round(coalesce(CDT.TOTAL,0),2) as float) AS Total,
	cast(A.START_AMOUNT + round(coalesce(TOTAL.TOTAL,0),2) as float) AS Solde

FROM [user].USER_ACCOUNT UA
INNER JOIN [ref].ACCOUNT A
	ON UA.ID_ACCOUNT = A.ID
LEFT JOIN 
(
	SELECT 
		AST.ID_ACCOUNT,
		SUM(AMOUNT_OPERATION) as TOTAL
	FROM [as].ACCOUNT_STATEMENT AST
	WHERE (ID_ACCOUNT = @idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION<=@dateEnd
	GROUP BY AST.ID_ACCOUNT
) AS TOTAL
 ON UA.ID_ACCOUNT = TOTAL.ID_ACCOUNT
LEFT JOIN
(
	SELECT	
		ID_ACCOUNT,
		SUM(coalesce(DEBIT,0)) AS DEBIT,
		SUM(coalesce(CREDIT,0)) AS CREDIT,
		SUM(coalesce(DEBIT,0)) + SUM(coalesce(CREDIT,0)) AS TOTAL
	FROM (
	SELECT 
		ID_ACCOUNT,
		CASE WHEN AMOUNT_OPERATION<0 THEN AMOUNT_OPERATION END AS DEBIT,
		CASE WHEN AMOUNT_OPERATION>0 THEN AMOUNT_OPERATION END AS CREDIT
	FROM [as].ACCOUNT_STATEMENT
	WHERE (ID_ACCOUNT = @idAccount OR @idAccount is NULL)
	AND DATE_INTEGRATION >= @dateStart
	AND DATE_INTEGRATION <= @dateEnd
	) AS CDT
	GROUP BY ID_ACCOUNT
) AS CDT
	ON UA.ID_ACCOUNT = CDT.ID_ACCOUNT
WHERE ID_USER=@idUser
AND (UA.ID_ACCOUNT = @idAccount OR @idAccount is NULL)
END
