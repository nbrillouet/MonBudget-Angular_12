================ ngIf ==================================
==> seul la div visible est dans le dom
<div *ngIf="courses.length>0;then coursesList else noCourses"></div>
<ng-template #coursesList>
	List of courses
</ng-template>
<ng-template #noCourses>
	No courses yet
</ng-template>

================ hidden Property ======================
==> les 2 div restent dans le dom
<div [hidden]="courses.length==0">
	List of courses
</div>
<div [hidden]="courses.length>0">
	No courses yet
</div>

================ ngSwitchCase =========================
<div [ngSwitch]="viewMode">
	<div *ngSwitchCase="'map'"> Map View Content</div>
	<div *ngSwitchCase="'list'">List View Content</div>
	<div *ngSwitchDefault>Otherwise</div>
</div>

================ ngFor ================================
==> index fait parti des exported values comme first / last / even / odd

<ul>
	<li *ngFor="let course of courses; index as i">
		{{ i }} - {{ course.name }}
	</li>
</ul>

==> exemple avec even:
<ul>
	<li *ngFor="let course of courses; even as isEven">
		{{ course.name }} <span *ngIf="isEven">(EVEN)</span>
	</li>
</ul>

==> comment angular construit ces listes (lors de rechargement coté serveur)
exemple : chargement par id
<ul>
	<li *ngFor="let course of courses; trackBy: trackCourse()">
		{{ course.name }}
	</li>
</ul>

dans ts:
trackCourse(index, course) {
	return course ? course.id : undefined;
}

================ leading asterisk ================================
==> evite de faire un ng-template


================ ngClass =========================================
==> permet de gerer plusieurs class css
[ngClass] = "{
	'glyphicon-star': isSelected,
	'glyphicon-star-empty': !isSelected
}"

================ ngStyle =========================================
==> canSave est une variable dans le ts

<button
	[ngStyle]="{
		'backgroundColor': canSave ? 'blue' : 'gray',
		'color' : canSave ? 'white' : 'black'
	}"
>


================ safe traversal operator =========================
==> les variables non chargées qui causent erreur dans la console
si assignee est null

<span> {{ task.assignee?.name }} </span>

================ custom directives ===============================
==> exemple : formatage du numero de telephone / mettre en lowercase
creation à partir de angular-cli en mode console:
$ng g d input-format

==>dans le ts du directive:
il y a le selector : '[appInputFormat]'

import { Directive, HostListener } from '@angular/core';

==>dans la class:
//le input a le meme nom que la directive , on peut l'appliquer directement dans le HTML [appInputFormat]="'uppercase'" 
//au lieu de appInputFormat [nomDuInput]="'uppercase'"
@Input('appInputFormat') format;

constructor(private el: ElementRef) {

}

@HostListener('focus') onFocus() {
	console.log("on Focus");
}

//click en dehors de lelement
@HostListener('blur') onBlur {
	let value: string = this.el.nativeElement.value;
	if(this.format == 'lowercase')
		this.el.nativeElement.value = value.toLowerCase();
	else
		this.el.nativeElement.value = value.toUpperCase();
}



==>Dans HTML d'un autre composant
<input type="text" [appInputFormat]="'uppercase'">

















