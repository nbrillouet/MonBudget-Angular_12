// <auto-generated />
using System;
using Budget.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Budget.DATA.Migrations
{
    [DbContext(typeof(BudgetContext))]
    [Migration("20220118093548_removeOperationMethodOtf")]
    partial class removeOperationMethodOtf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Budget.MODEL.AsEvolutionCdbDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AsEvolutionDto");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<double>("AlertThreshold")
                        .HasColumnType("float")
                        .HasColumnName("ALERT_THRESHOLD");

                    b.Property<int>("IdAccountType")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT_TYPE");

                    b.Property<int>("IdBankAgency")
                        .HasColumnType("int")
                        .HasColumnName("ID_BANK_AGENCY");

                    b.Property<int>("IdUserOwner")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_OWNER");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NUMBER");

                    b.Property<double>("StartAmount")
                        .HasColumnType("float")
                        .HasColumnName("START_AMOUNT");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountType");

                    b.HasIndex("IdBankAgency");

                    b.HasIndex("IdUserOwner");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("IX_AccountNumber")
                        .HasFilter("[NUMBER] IS NOT NULL");

                    b.ToTable("ACCOUNT", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<double>("AmountOperation")
                        .HasColumnType("float")
                        .HasColumnName("AMOUNT_OPERATION");

                    b.Property<DateTime>("DateImport")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_IMPORT");

                    b.Property<DateTime?>("DateIntegration")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INTEGRATION");

                    b.Property<DateTime?>("DateOperation")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_OPERATION");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdImport")
                        .HasColumnType("int")
                        .HasColumnName("ID_IMPORT");

                    b.Property<int>("IdMovement")
                        .HasColumnType("int")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION");

                    b.Property<int>("IdOperationDetail")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_DETAIL");

                    b.Property<int>("IdOperationMethod")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<int>("IdOperationType")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE");

                    b.Property<int>("IdOperationTypeFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<string>("LabelAs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LABEL_AS");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("REFERENCE");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdImport");

                    b.HasIndex("IdMovement");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdOperationDetail");

                    b.HasIndex("IdOperationMethod");

                    b.HasIndex("IdOperationType");

                    b.HasIndex("IdOperationTypeFamily");

                    b.ToTable("ACCOUNT_STATEMENT", "as");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateImport")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_IMPORT");

                    b.Property<string>("FileImport")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FILE_IMPORT");

                    b.Property<int>("IdBankAgency")
                        .HasColumnType("int")
                        .HasColumnName("ID_BANK_AGENCY");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.HasKey("Id");

                    b.HasIndex("IdBankAgency");

                    b.HasIndex("IdUser");

                    b.ToTable("ACCOUNT_STATEMENT_IMPORT", "as");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImportFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<double?>("AmountOperation")
                        .HasColumnType("float")
                        .HasColumnName("AMOUNT_OPERATION");

                    b.Property<DateTime>("DateImport")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_IMPORT");

                    b.Property<DateTime?>("DateIntegration")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INTEGRATION");

                    b.Property<DateTime?>("DateOperation")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_OPERATION");

                    b.Property<int?>("IdAccount")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdImport")
                        .HasColumnType("int")
                        .HasColumnName("ID_IMPORT");

                    b.Property<int?>("IdMovement")
                        .HasColumnType("int")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<int?>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION");

                    b.Property<int?>("IdOperationDetail")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_DETAIL");

                    b.Property<int?>("IdOperationMethod")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<int?>("IdOperationType")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE");

                    b.Property<int?>("IdOperationTypeFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<int?>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("ID_STATE");

                    b.Property<bool>("IsDuplicated")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DUPLICATED");

                    b.Property<string>("LabelAs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LABEL_AS");

                    b.Property<string>("LabelAsWork")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LABEL_OPERATION_WORK");

                    b.Property<string>("OdOperationKeyword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OD_OPERATION_KEYWORD");

                    b.Property<string>("OdOperationLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OD_OPERATION_LABEL");

                    b.Property<string>("OdPlaceKeyword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OD_PLACE_KEYWORD");

                    b.Property<string>("OdPlaceLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OD_PLACE_LABEL");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("REFERENCE");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdImport");

                    b.HasIndex("IdMovement");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdOperationDetail");

                    b.HasIndex("IdOperationMethod");

                    b.HasIndex("IdOperationType");

                    b.HasIndex("IdOperationTypeFamily");

                    b.HasIndex("IdState");

                    b.ToTable("ACCOUNT_STATEMENT_IMPORT_FILE", "as");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdAccountStatement")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT_STATEMENT");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN");

                    b.HasKey("Id");

                    b.HasIndex("IdPlan");

                    b.HasIndex("IdAccountStatement", "IdPlan")
                        .IsUnique()
                        .HasDatabaseName("IX_ASP_IdAccountStatement_IdPlan");

                    b.ToTable("ACCOUNT_STATEMENT_PLAN", "as");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("ACCOUNT_TYPE", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Extension")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EXTENSION");

                    b.Property<int>("IdFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_FAMILY");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.Property<string>("Path")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PATH");

                    b.HasKey("Id");

                    b.ToTable("ASSET", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdBankSubFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_BANK_SUB_FAMILY");

                    b.Property<int>("IdGMapAddress")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ADDRESS");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdBankSubFamily");

                    b.HasIndex("IdGMapAddress");

                    b.ToTable("BANK_AGENCY", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("CODE");

                    b.Property<int>("IdAsset")
                        .HasColumnType("int")
                        .HasColumnName("ID_ASSET");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdAsset");

                    b.ToTable("BANK_FAMILY", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankFileDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdBankFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_BANK_FAMILY");

                    b.Property<string>("LabelField")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL_FIELD");

                    b.Property<int>("LabelOrder")
                        .HasColumnType("int")
                        .HasColumnName("LABEL_ORDER");

                    b.HasKey("Id");

                    b.HasIndex("IdBankFamily");

                    b.ToTable("BANK_FILE_DEFINITION", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankSubFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CODE");

                    b.Property<int>("IdAsset")
                        .HasColumnType("int")
                        .HasColumnName("ID_ASSET");

                    b.Property<int>("IdBankFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_BANK_FAMILY");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdAsset");

                    b.HasIndex("IdBankFamily");

                    b.ToTable("BANK_SUB_FAMILY", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FORMATTED_ADDRESS");

                    b.Property<int>("IdGMapAdministrativeAreaLevel1")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ADMINISTRATIVE_AREA_LEVEL_1");

                    b.Property<int>("IdGMapAdministrativeAreaLevel2")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ADMINISTRATIVE_AREA_LEVEL_2");

                    b.Property<int>("IdGMapCountry")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_COUNTRY");

                    b.Property<int>("IdGMapLocality")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_LOCALITY");

                    b.Property<int>("IdGMapNeighborhood")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_NEIGHBORHOOD");

                    b.Property<int>("IdGMapPostalCode")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_POSTAL_CODE");

                    b.Property<int>("IdGMapRoute")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ROUTE");

                    b.Property<int>("IdGMapStreetNumber")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_STREET_NUMBER");

                    b.Property<int>("IdGMapSublocalityLevel1")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_SUBLOCALITY_LEVEL_1");

                    b.Property<int>("IdGMapSublocalityLevel2")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_SUBLOCALITY_LEVEL_2");

                    b.Property<double>("Lat")
                        .HasColumnType("float")
                        .HasColumnName("LAT");

                    b.Property<double>("Lng")
                        .HasColumnType("float")
                        .HasColumnName("LNG");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapAdministrativeAreaLevel1");

                    b.HasIndex("IdGMapCountry");

                    b.HasIndex("IdGMapLocality");

                    b.HasIndex("IdGMapNeighborhood");

                    b.HasIndex("IdGMapPostalCode");

                    b.HasIndex("IdGMapRoute");

                    b.HasIndex("IdGMapStreetNumber");

                    b.HasIndex("IdGMapSublocalityLevel1");

                    b.HasIndex("IdGMapSublocalityLevel2");

                    b.ToTable("GMAP_ADDRESS", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdGMapAddress")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ADDRESS");

                    b.Property<int>("IdGMapType")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapAddress");

                    b.HasIndex("IdGMapType");

                    b.ToTable("GMAP_ADDRESS_TYPE", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAdministrativeAreaLevel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_ADMINISTRATIVE_AREA_LEVEL_1", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAdministrativeAreaLevel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_ADMINISTRATIVE_AREA_LEVEL_2", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_COUNTRY", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapLocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_LOCALITY", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapNeighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_NEIGHBORHOOD", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapPostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_POSTAL_CODE", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_ROUTE", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapStreetNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_STREET_NUMBER", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapSublocalityLevel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_SUBLOCALITY_LEVEL_1", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapSublocalityLevel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_SUBLOCALITY_LEVEL_2", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KEYWORD");

                    b.HasKey("Id");

                    b.ToTable("GMAP_TYPE", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapTypeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LANGUAGE_CODE");

                    b.Property<int>("IdGMapType")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_TYPE");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapType");

                    b.ToTable("GMAP_TYPE_LANGUAGE", "gmap");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Month", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("LabelLong")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL_LONG");

                    b.Property<string>("LabelShort")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL_SHORT");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LANGUAGE_CODE");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NUMBER");

                    b.HasKey("Id");

                    b.ToTable("MONTH", "gen");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdOperationMethod")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<int>("IdOperationType")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE");

                    b.Property<int>("IdUserGroup")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_GROUP");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit")
                        .HasColumnName("IS_MANDATORY");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LABEL");

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("REFERENCE");

                    b.HasKey("Id");

                    b.HasIndex("IdOperationMethod");

                    b.HasIndex("IdOperationType");

                    b.HasIndex("Label", "IdOperationMethod", "IdOperationType")
                        .IsUnique()
                        .HasDatabaseName("IX_OperationKey")
                        .HasFilter("[LABEL] IS NOT NULL");

                    b.ToTable("OPERATION", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdGMapAddress")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ADDRESS");

                    b.Property<int>("IdOperation")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION");

                    b.Property<int>("IdOperationPlace")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_PLACE");

                    b.Property<int>("IdUserGroup")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_GROUP");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit")
                        .HasColumnName("IS_MANDATORY");

                    b.Property<string>("KeywordOperation")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("KEYWORD_OPERATION");

                    b.Property<string>("KeywordPlace")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("KEYWORD_PLACE");

                    b.Property<string>("OperationLabel")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OPERATION_LABEL");

                    b.Property<string>("PlaceLabel")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PLACE_LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapAddress");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdOperationPlace");

                    b.HasIndex("KeywordOperation", "KeywordPlace", "IdUserGroup")
                        .IsUnique()
                        .HasDatabaseName("IX_Keyword")
                        .HasFilter("[KEYWORD_OPERATION] IS NOT NULL AND [KEYWORD_PLACE] IS NOT NULL");

                    b.ToTable("OPERATION_DETAIL", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("OPERATION_METHOD", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationMethodLexical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdBankFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_BANK_FAMILY");

                    b.Property<int>("IdOperationMethod")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<string>("Keyword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KEYWORD");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("ORDER_ID");

                    b.HasKey("Id");

                    b.HasIndex("IdBankFamily");

                    b.HasIndex("IdOperationMethod");

                    b.ToTable("OPERATION_METHOD_LEXICAL", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODE");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("OPERATION_PLACE", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTransverse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("OPERATION_TRANSVERSE", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTransverseAs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdAccountStatement")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT_STATEMENT");

                    b.Property<int>("IdOperationTransverse")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TRANSVERSE");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountStatement");

                    b.HasIndex("IdOperationTransverse");

                    b.ToTable("OPERATION_TRANSVERSE_AS", "as");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTransverseAsif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdAccountStatementImportFile")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT_STATEMENT_IMPORT_FILE");

                    b.Property<int>("IdOperationTransverse")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TRANSVERSE");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountStatementImportFile");

                    b.HasIndex("IdOperationTransverse");

                    b.ToTable("OPERATION_TRANSVERSE_ASIF", "as");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("CODE");

                    b.Property<int>("IdOperationTypeFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<int>("IdUserGroup")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_GROUP");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit")
                        .HasColumnName("IS_MANDATORY");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdOperationTypeFamily");

                    b.ToTable("OPERATION_TYPE", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTypeFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("CODE");

                    b.Property<int>("IdAsset")
                        .HasColumnType("int")
                        .HasColumnName("ID_ASSET");

                    b.Property<int>("IdMovement")
                        .HasColumnType("int")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<int>("IdUserGroup")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_GROUP");

                    b.Property<bool>("IsMandatory")
                        .HasMaxLength(4)
                        .HasColumnType("bit")
                        .HasColumnName("IS_MANDATORY");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdAsset");

                    b.HasIndex("IdMovement");

                    b.HasIndex("Id", "IdMovement")
                        .IsUnique()
                        .HasDatabaseName("IX_OTF_Id_IdMovement");

                    b.ToTable("OPERATION_TYPE_FAMILY", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.Property<string>("ImportFileDir")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IMPORT_FILE_DIR");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("PARAMETER", "gen");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COLOR");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LABEL");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.HasKey("Id");

                    b.ToTable("PLAN", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdAccount")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdPlan");

                    b.ToTable("PLAN_ACCOUNT", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPoste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPlan")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN");

                    b.Property<int>("IdPoste")
                        .HasColumnType("int")
                        .HasColumnName("ID_POSTE");

                    b.Property<int>("IdReferenceTable")
                        .HasColumnType("int")
                        .HasColumnName("ID_REFERENCE_TABLE");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdPlan");

                    b.HasIndex("IdPoste");

                    b.HasIndex("IdReferenceTable");

                    b.ToTable("PLAN_POSTE", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPosteFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdFrequency")
                        .HasColumnType("int")
                        .HasColumnName("ID_FREQUENCY");

                    b.Property<int>("IdPlanPoste")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_POSTE");

                    b.Property<double>("PreviewAmount")
                        .HasColumnType("float")
                        .HasColumnName("PREVIEW_AMOUNT");

                    b.HasKey("Id");

                    b.HasIndex("IdFrequency");

                    b.HasIndex("IdPlanPoste");

                    b.ToTable("PLAN_POSTE_FREQUENCY", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPosteReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPlanPoste")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_POSTE");

                    b.Property<int>("IdReference")
                        .HasColumnType("int")
                        .HasColumnName("ID_REFERENCE");

                    b.Property<int>("IdReferenceTable")
                        .HasColumnType("int")
                        .HasColumnName("ID_REFERENCE_TABLE");

                    b.HasKey("Id");

                    b.HasIndex("IdPlanPoste");

                    b.HasIndex("IdReferenceTable");

                    b.ToTable("PLAN_POSTE_REFERENCE", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPosteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPlanPoste")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_POSTE");

                    b.Property<int>("IdPlanUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_USER");

                    b.Property<int>("IsSalaryEstimatedPart")
                        .HasColumnType("int")
                        .HasColumnName("IS_SALARY_ESTIMATED_PART");

                    b.Property<double>("PercentagePart")
                        .HasColumnType("float")
                        .HasColumnName("PERCENTAGE_PART");

                    b.HasKey("Id");

                    b.HasIndex("IdPlanPoste");

                    b.HasIndex("IdPlanUser");

                    b.ToTable("PLAN_POSTE_USER", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPlan")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdPlan", "IdUser")
                        .IsUnique()
                        .HasDatabaseName("IX_PlanUser");

                    b.ToTable("PLAN_USER", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdMovement")
                        .HasColumnType("int")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.HasIndex("IdMovement");

                    b.ToTable("POSTE", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.ReferenceTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TABLE_NAME");

                    b.HasKey("Id");

                    b.ToTable("REFERENCE_TABLE", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.StateAsif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("STATE_ASIF", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACTIVATION_CODE");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("USER_ACCOUNT", "user");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserCustomOtf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int?>("IdAccount")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdOperationTypeFamily")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdOperationTypeFamily", "IdUser", "IdAccount")
                        .IsUnique()
                        .HasDatabaseName("IX_UCO_IdOperationTypeFamily_IdUser_IdAccount")
                        .HasFilter("[ID_ACCOUNT] IS NOT NULL");

                    b.ToTable("USER_CUSTOM_OTF", "user");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE_BODY");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2")
                        .HasColumnName("MESSAGE_DATE_SENT");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE_FROM");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IS_READ");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE_SUBJECT");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("USER_MESSAGE", "user");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AVATAR_URL");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BANNER_URL");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LANGUAGE");

                    b.Property<string>("Layout")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAYOUT");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SCHEME");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("THEME");

                    b.HasKey("Id");

                    b.ToTable("USER_PREFERENCE", "user");
                });

            modelBuilder.Entity("Budget.MODEL.Database.VPlanGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<double?>("AmountOperation")
                        .HasColumnType("float")
                        .HasColumnName("AMOUNT_OPERATION");

                    b.Property<DateTime?>("DateIntegration")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_INTEGRATION");

                    b.Property<int?>("IdAccountStatement")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACCOUNT_STATEMENT");

                    b.Property<int?>("IdPlan")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN");

                    b.Property<int?>("IdPlanPoste")
                        .HasColumnType("int")
                        .HasColumnName("ID_PLAN_POSTE");

                    b.Property<int?>("IdPoste")
                        .HasColumnType("int")
                        .HasColumnName("ID_POSTE");

                    b.Property<int?>("IdReference")
                        .HasColumnType("int")
                        .HasColumnName("ID_REFERENCE");

                    b.Property<string>("LabelReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL_REFERENCE");

                    b.Property<int?>("Month")
                        .HasColumnType("int")
                        .HasColumnName("MONTH");

                    b.Property<string>("PlanPosteLabel")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PLAN_POSTE_LABEL");

                    b.Property<double?>("PreviewAmount")
                        .HasColumnType("float")
                        .HasColumnName("PREVIEW_AMOUNT");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.HasKey("Id");

                    b.ToTable("V_PLAN_GLOBAL", "plan");
                });

            modelBuilder.Entity("Budget.MODEL.Dto.BaseChartData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseChartData");
                });

            modelBuilder.Entity("Budget.MODEL.Dto.SelectNameValueDto<double>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SelectNameValueDto");
                });

            modelBuilder.Entity("Budget.MODEL.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("MOVEMENT", "ref");
                });

            modelBuilder.Entity("Budget.MODEL.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACTIVATION_CODE");

                    b.Property<DateTime?>("ActivationDateSend")
                        .HasColumnType("datetime2")
                        .HasColumnName("ACTIVATION_DATE_SEND");

                    b.Property<bool>("ActivationIsConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVATION_IS_CONFIRMED");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<DateTime>("DateLastActive")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_ACTIVE_DATE");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MAIL_ADDRESS");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GENDER");

                    b.Property<int?>("IdGMapAddress")
                        .HasColumnType("int")
                        .HasColumnName("ID_GMAP_ADDRESS");

                    b.Property<int>("IdUserGroup")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_GROUP");

                    b.Property<int?>("IdUserPreference")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_PREFERENCE");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_NAME");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PASSWORD_SALT");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ROLE");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapAddress");

                    b.HasIndex("IdUserPreference");

                    b.ToTable("USER", "user");
                });

            modelBuilder.Entity("Budget.MODEL.UserShortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ICON");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TITLE");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("USER_SHORTCUT", "user");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Account", b =>
                {
                    b.HasOne("Budget.MODEL.Database.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("IdAccountType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.BankAgency", "BankAgency")
                        .WithMany()
                        .HasForeignKey("IdBankAgency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("IdUserOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("BankAgency");

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatement", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.AccountStatementImport", "AccountStatementImport")
                        .WithMany()
                        .HasForeignKey("IdImport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Movement", "Movement")
                        .WithMany()
                        .HasForeignKey("IdMovement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationDetail", "OperationDetail")
                        .WithMany()
                        .HasForeignKey("IdOperationDetail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("IdOperationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationTypeFamily", "OperationTypeFamily")
                        .WithMany()
                        .HasForeignKey("IdOperationTypeFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AccountStatementImport");

                    b.Navigation("Movement");

                    b.Navigation("Operation");

                    b.Navigation("OperationDetail");

                    b.Navigation("OperationMethod");

                    b.Navigation("OperationType");

                    b.Navigation("OperationTypeFamily");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImport", b =>
                {
                    b.HasOne("Budget.MODEL.Database.BankAgency", "BankAgency")
                        .WithMany()
                        .HasForeignKey("IdBankAgency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAgency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImportFile", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount");

                    b.HasOne("Budget.MODEL.Database.AccountStatementImport", "AccountStatementImport")
                        .WithMany()
                        .HasForeignKey("IdImport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Movement", "Movement")
                        .WithMany()
                        .HasForeignKey("IdMovement");

                    b.HasOne("Budget.MODEL.Database.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation");

                    b.HasOne("Budget.MODEL.Database.OperationDetail", "OperationDetail")
                        .WithMany()
                        .HasForeignKey("IdOperationDetail");

                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod");

                    b.HasOne("Budget.MODEL.Database.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("IdOperationType");

                    b.HasOne("Budget.MODEL.Database.OperationTypeFamily", "OperationTypeFamily")
                        .WithMany()
                        .HasForeignKey("IdOperationTypeFamily");

                    b.HasOne("Budget.MODEL.Database.StateAsif", "State")
                        .WithMany()
                        .HasForeignKey("IdState");

                    b.Navigation("Account");

                    b.Navigation("AccountStatementImport");

                    b.Navigation("Movement");

                    b.Navigation("Operation");

                    b.Navigation("OperationDetail");

                    b.Navigation("OperationMethod");

                    b.Navigation("OperationType");

                    b.Navigation("OperationTypeFamily");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementPlan", b =>
                {
                    b.HasOne("Budget.MODEL.Database.AccountStatement", "AccountStatement")
                        .WithMany()
                        .HasForeignKey("IdAccountStatement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankAgency", b =>
                {
                    b.HasOne("Budget.MODEL.Database.BankSubFamily", "BankSubFamily")
                        .WithMany()
                        .HasForeignKey("IdBankSubFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapAddress", "GMapAddress")
                        .WithMany()
                        .HasForeignKey("IdGMapAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankSubFamily");

                    b.Navigation("GMapAddress");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankFamily", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("IdAsset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankFileDefinition", b =>
                {
                    b.HasOne("Budget.MODEL.Database.BankFamily", "BankFamily")
                        .WithMany()
                        .HasForeignKey("IdBankFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankFamily");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankSubFamily", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("IdAsset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.BankFamily", "BankFamily")
                        .WithMany()
                        .HasForeignKey("IdBankFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("BankFamily");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddress", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAdministrativeAreaLevel1", "GMapAdministrativeAreaLevel1")
                        .WithMany()
                        .HasForeignKey("IdGMapAdministrativeAreaLevel1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapAdministrativeAreaLevel2", "GMapAdministrativeAreaLevel2")
                        .WithMany()
                        .HasForeignKey("IdGMapAdministrativeAreaLevel1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapCountry", "GMapCountry")
                        .WithMany()
                        .HasForeignKey("IdGMapCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapLocality", "GMapLocality")
                        .WithMany()
                        .HasForeignKey("IdGMapLocality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapNeighborhood", "GMapNeighborhood")
                        .WithMany()
                        .HasForeignKey("IdGMapNeighborhood")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapPostalCode", "GMapPostalCode")
                        .WithMany()
                        .HasForeignKey("IdGMapPostalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapRoute", "GMapRoute")
                        .WithMany()
                        .HasForeignKey("IdGMapRoute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapStreetNumber", "GMapStreetNumber")
                        .WithMany()
                        .HasForeignKey("IdGMapStreetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapSublocalityLevel1", "GMapSublocalityLevel1")
                        .WithMany()
                        .HasForeignKey("IdGMapSublocalityLevel1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapSublocalityLevel2", "GMapSublocalityLevel2")
                        .WithMany()
                        .HasForeignKey("IdGMapSublocalityLevel2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GMapAdministrativeAreaLevel1");

                    b.Navigation("GMapAdministrativeAreaLevel2");

                    b.Navigation("GMapCountry");

                    b.Navigation("GMapLocality");

                    b.Navigation("GMapNeighborhood");

                    b.Navigation("GMapPostalCode");

                    b.Navigation("GMapRoute");

                    b.Navigation("GMapStreetNumber");

                    b.Navigation("GMapSublocalityLevel1");

                    b.Navigation("GMapSublocalityLevel2");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddressType", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAddress", "GMapAddress")
                        .WithMany()
                        .HasForeignKey("IdGMapAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.GMapType", "GMapType")
                        .WithMany()
                        .HasForeignKey("IdGMapType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GMapAddress");

                    b.Navigation("GMapType");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapTypeLanguage", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapType", "GMapType")
                        .WithMany()
                        .HasForeignKey("IdGMapType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GMapType");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Operation", b =>
                {
                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("IdOperationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationMethod");

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationDetail", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAddress", "GMapAddress")
                        .WithMany()
                        .HasForeignKey("IdGMapAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationPlace", "OperationPlace")
                        .WithMany()
                        .HasForeignKey("IdOperationPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GMapAddress");

                    b.Navigation("Operation");

                    b.Navigation("OperationPlace");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationMethodLexical", b =>
                {
                    b.HasOne("Budget.MODEL.Database.BankFamily", "BankFamily")
                        .WithMany()
                        .HasForeignKey("IdBankFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankFamily");

                    b.Navigation("OperationMethod");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTransverse", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTransverseAs", b =>
                {
                    b.HasOne("Budget.MODEL.Database.AccountStatement", "AccountStatement")
                        .WithMany()
                        .HasForeignKey("IdAccountStatement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationTransverse", "OperationTransverse")
                        .WithMany()
                        .HasForeignKey("IdOperationTransverse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");

                    b.Navigation("OperationTransverse");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTransverseAsif", b =>
                {
                    b.HasOne("Budget.MODEL.Database.AccountStatementImportFile", "AccountStatementImportFile")
                        .WithMany()
                        .HasForeignKey("IdAccountStatementImportFile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.OperationTransverse", "OperationTransverse")
                        .WithMany()
                        .HasForeignKey("IdOperationTransverse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatementImportFile");

                    b.Navigation("OperationTransverse");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationType", b =>
                {
                    b.HasOne("Budget.MODEL.Database.OperationTypeFamily", "OperationTypeFamily")
                        .WithMany()
                        .HasForeignKey("IdOperationTypeFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationTypeFamily");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTypeFamily", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("IdAsset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Movement", "Movement")
                        .WithMany()
                        .HasForeignKey("IdMovement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Movement");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Parameter", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanAccount", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPoste", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.Poste", "Poste")
                        .WithMany()
                        .HasForeignKey("IdPoste")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.ReferenceTable", "ReferenceTable")
                        .WithMany()
                        .HasForeignKey("IdReferenceTable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Poste");

                    b.Navigation("ReferenceTable");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPosteFrequency", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Month", "Frequency")
                        .WithMany()
                        .HasForeignKey("IdFrequency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.PlanPoste", "PlanPoste")
                        .WithMany()
                        .HasForeignKey("IdPlanPoste")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Frequency");

                    b.Navigation("PlanPoste");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPosteReference", b =>
                {
                    b.HasOne("Budget.MODEL.Database.PlanPoste", "PlanPoste")
                        .WithMany()
                        .HasForeignKey("IdPlanPoste")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.ReferenceTable", "ReferenceTable")
                        .WithMany()
                        .HasForeignKey("IdReferenceTable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanPoste");

                    b.Navigation("ReferenceTable");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanPosteUser", b =>
                {
                    b.HasOne("Budget.MODEL.Database.PlanPoste", "PlanPoste")
                        .WithMany()
                        .HasForeignKey("IdPlanPoste")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.Database.PlanUser", "PlanUser")
                        .WithMany()
                        .HasForeignKey("IdPlanUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanPoste");

                    b.Navigation("PlanUser");
                });

            modelBuilder.Entity("Budget.MODEL.Database.PlanUser", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Poste", b =>
                {
                    b.HasOne("Budget.MODEL.Movement", "Movement")
                        .WithMany()
                        .HasForeignKey("IdMovement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movement");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserAccount", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserCustomOtf", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount");

                    b.HasOne("Budget.MODEL.Database.OperationTypeFamily", "OperationTypeFamily")
                        .WithMany()
                        .HasForeignKey("IdOperationTypeFamily")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OperationTypeFamily");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserMessage", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budget.MODEL.User", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAddress", "GMapAddress")
                        .WithMany()
                        .HasForeignKey("IdGMapAddress");

                    b.HasOne("Budget.MODEL.Database.UserPreference", "UserPreference")
                        .WithMany()
                        .HasForeignKey("IdUserPreference");

                    b.Navigation("GMapAddress");

                    b.Navigation("UserPreference");
                });

            modelBuilder.Entity("Budget.MODEL.UserShortcut", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
